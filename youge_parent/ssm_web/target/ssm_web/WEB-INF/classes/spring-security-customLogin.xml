<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
">

    <!--配置不拦截login.jsp和error.jsp,security=none表明该url路径不加入安全控制-->
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/other.html" security="none"/>
    <!--不拦截静态资源-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/images/**" security="none"/>
    <security:http pattern="/fonts/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/lib/**" security="none"/>

    <!--作用二：授权认证-->
    <!--
        配置拦截的规则
        auto-config="使用SpringSecurity自带的页面"
        use-expressions="是否使用spel表达式"，如果使用表达式：hasRole('ROLE_USER')
    -->
    <security:http auto-config="false" use-expressions="true">
        <!-- 配置拦截的请求地址，任何请求地址都必须有ROLE_USER的权限 -->
        <!--
            SpringSecurity中内置了两个角色：ROLE_USER和ROLE_ADMIN
        -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>


        <!--
            form-login：用于登录的自定义配置
                login-page:指定自定义登录页面
                login-processing-url：登录功能的处理逻辑（security框架内置的）
                default-target-url：配置登录成功后默认跳转的页面
                authentication-failure-url：配置登录失败后跳转的页面
        -->
        <security:form-login
            login-page="/login.html"
            login-processing-url="/login"
            default-target-url="/admin/index.jsp"
            authentication-failure-url="/login.html"/>

        <!--关闭跨站请求伪造-->
        <!--
            springsecurity认为外部的页面都是一种入侵，那么如果需要配置自定义的页面，需要关闭它的这种机制
        -->
        <security:csrf disabled="true"/>


        <!--
            配置springSecurity的退出功能
            退出功能有一个默认处理的url：/logout
            logout-success-url：配置成功注销退出后跳转的页面
        -->
        <security:logout logout-success-url="/login.html"/>
    </security:http>

    <!--作用一：用户认证-->
    <!-- 配置认证信息 -->
    <!--
        authentication-manager:用户认证管理器
    -->
    <security:authentication-manager>
        <!--从数据库读取用户名和密码-->
        <!--通过user-service-ref引用用户信息读取bean(配置为对应bean的id)-->
        <security:authentication-provider user-service-ref="userService">
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>

    </security:authentication-manager>



    <!--定义Bcrypt加密算法工具类对象(BCryptPasswordEncoder加密工具类是security的jar中的，不需要额外引入jar)-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>
